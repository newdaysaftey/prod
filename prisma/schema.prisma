generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type CartItem {
  ProductId   String
  ColorId     String
  SizeId      String
  Quantity    Int
  PriceAtTime Float
}

model OrderItem {
  id          String  @id @default(uuid()) @map("_id")
  productId   String
  colorId     String
  sizeId      String
  orderId     String
  Quantity    Int
  PriceAtTime Float
  Order       Order   @relation(fields: [orderId], references: [orderId])
  Product     Product @relation(fields: [productId], references: [ProductId])
  Color       Color   @relation(fields: [colorId], references: [ColorId])
  Size        Size    @relation(fields: [sizeId], references: [SizeId])
}

model Address {
  id               String  @id @default(uuid()) @map("_id")
  user             User    @relation(fields: [userId], references: [UserId])
  userId           String
  firstName        String?
  lastName         String?
  street           String
  city             String
  state            String
  country          String  @default("USA")
  pincode          String
  isDefault        Boolean @default(false)
  isDeleted        Boolean @default(false)
  ordersAsShipping Order[] @relation("shippingAddress")
  ordersAsBilling  Order[] @relation("billingAddress")
}

model User {
  UserId       String     @id @default(uuid()) @map("_id")
  Email        String     @unique
  Username     String
  FirstName    String
  MiddleName   String?
  LastName     String
  Role         Role       @default(USER)
  PasswordHash String?
  IsActive     Boolean    @default(false)
  IsDeleted    Boolean    @default(false)
  CreatedAt    DateTime   @default(now())
  UpdatedAt    DateTime   @updatedAt
  DeletedAt    DateTime?
  CreatedById  String?
  ModifiedById String?
  DeletedById  String?
  GoogleId     String?    @unique
  Phone        Int?
  Gender       String?
  CountryCode  String?
  ImageUrl     String?
  addresses    Address[]
  LastLogin    DateTime?
  Orders       Order[]
  cartItems    CartItem[]
}

enum Role {
  USER
  ADMIN
}

model Category {
  CategoryId String    @id @default(uuid()) @map("_id")
  Name       String
  IsDeleted  Boolean   @default(false)
  Products   Product[]
  CreatedOn  DateTime  @default(now())
  ModifiedOn DateTime  @updatedAt
}

model Product {
  ProductId     String    @id @default(uuid()) @map("_id")
  Name          String
  Description   String
  Base_price    Float
  Size          String?
  Color         String?
  Available     Int?
  Tags          String?
  AverageRating Float?
  CategoryId    String
  Category      Category  @relation(fields: [CategoryId], references: [CategoryId])
  IsDeleted     Boolean   @default(false)
  CreatedAt     DateTime  @default(now())
  ModifiedAt    DateTime  @updatedAt
  DeletedAt     DateTime?
  CreatedById   String?
  ModifiedById  String?
  DeletedById   String?
  ImageUrl      String?
  IsActive      Boolean   @default(true)
  Colors        Color[]

  OrderItem OrderItem[]
}

model Size {
  SizeId          String  @id @default(uuid()) @map("_id")
  Size            String
  Stock           Int
  PriceAdjustment Float
  IsAvailable     Boolean @default(true)
  Color           Color   @relation(fields: [ColorId], references: [ColorId])
  ColorId         String
  isDeleted       Boolean @default(false)

  OrderItem OrderItem[]
}

model Color {
  ColorId   String   @id @default(uuid()) @map("_id")
  ColorName String
  ColorCode String
  Images    String[]
  Product   Product  @relation(fields: [ProductId], references: [ProductId])
  ProductId String
  Sizes     Size[]
  isDeleted Boolean  @default(false)

  OrderItem OrderItem[]
}

model Order {
  orderId           String        @id @default(uuid()) @map("_id")
  userId            String
  user              User          @relation(fields: [userId], references: [UserId])
  status            OrderStatus   @default(PENDING)
  totalAmount       Float
  paymentStatus     PaymentStatus
  paymentMethod     String
  orderItems        OrderItem[]
  shippingAddress   Address       @relation("shippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId String
  billingAddress    Address       @relation("billingAddress", fields: [billingAddressId], references: [id])
  billingAddressId  String
  orderDate         DateTime      @default(now())
  deliveryDate      DateTime?
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

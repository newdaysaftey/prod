// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Address {
  id         String   @default(uuid())
  Street     String
  City       String
  State      String
  Country    String
  Pincode    String
  IsDefault  Boolean  @default(false)
}

type CartItem {
  ProductId    String
  ColorId      String
  SizeId       String
  Quantity     Int
  PriceAtTime  Float
}

type OrderItem {
  ProductId       String
  ColorId         String
  SizeId          String
  Quantity        Int
  PriceAtTime     Float
  ProductSnapshot Json
}

model User {
  UserId        String      @id @default(uuid()) @map("_id")
  Email         String      @unique
  Username      String
  FirstName     String
  MiddleName    String?
  LastName      String
  Role          Role        @default(USER)
  PasswordHash  String?
  IsActive      Boolean     @default(false)
  IsDeleted     Boolean     @default(false)
  CreatedAt     DateTime    @default(now())
  UpdatedAt     DateTime    @updatedAt
  DeletedAt     DateTime?
  CreatedById   String?
  ModifiedById  String?
  DeletedById   String?
  GoogleId      String?     @unique
  Phone         String?
  Gender        String?
  CountryCode   String?
  ImageUrl      String?
  Addresses     Address[]   
  LastLogin     DateTime?   
  Orders        Order[]     
  Items         CartItem[]     
}

enum Role {
  USER
  ADMIN
}

model Category {
  CategoryId    String    @id @default(uuid()) @map("_id")
  Name          String
  IsDeleted       Boolean   @default(false)
  Products      Product[]
  CreatedOn     DateTime  @default(now())
  ModifiedOn    DateTime  @updatedAt
}


model Product {
  ProductId     String      @id @default(uuid()) @map("_id")
  Name          String
  Description   String
  Base_price    Float
  Size          String?      // Added Size field
  Color         String?      // Added Color field
  Available     Int?         // Added Available field
  Tags          String?     // Added Tags field
  AverageRating Float?      // Added AverageRating field
  CategoryId    String      // Foreign key for Category
  Category      Category    @relation(fields: [CategoryId], references: [CategoryId])
  IsDeleted       Boolean     @default(false)
  CreatedAt     DateTime    @default(now())
  ModifiedAt    DateTime    @updatedAt
  DeletedAt     DateTime?
  CreatedById   String?
  ModifiedById  String?
  DeletedById   String?
  ImageUrl      String?
  IsActive      Boolean     @default(true)
  Colors        Color[]
}

// Size model to handle size information for each color of a product
model Size {
  SizeId          String   @id @default(uuid()) @map("_id")
  Size            String
  Stock           Int
  PriceAdjustment Float
  IsAvailable     Boolean  @default(true)
  Color           Color    @relation(fields: [ColorId], references: [ColorId])
  ColorId         String
  isDeleted       Boolean   @default(false)
}

// Color model to handle color information for each product
model Color {
  ColorId      String     @id @default(uuid()) @map("_id")
  ColorName    String
  ColorCode    String
  Images       String[]
  Product      Product    @relation(fields: [ProductId], references: [ProductId])
  ProductId    String
  Sizes        Size[]
  isDeleted    Boolean   @default(false)
}


model Order {
  OrderId          String       @id @default(uuid()) @map("_id")
  UserId           String
  User             User         @relation(fields: [UserId], references: [UserId])
  ShippingAddress  Address
  Status           OrderStatus  @default(PENDING)
  TotalAmount      Float
  PaymentStatus    PaymentStatus
  PaymentMethod    String
  Items            OrderItem[]
  OrderDate        DateTime     @default(now())
  DeliveryDate     DateTime?
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}